name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      kernel_url:
        description: 'Kernel github url perf-kernel: https://github.com/ask9027/kernel_xiaomi_courbet.git, alfakernel: https://github.com/ask9027/kernel_xiaomi_sm6150.git'
        required: true
        default: 'https://github.com/ask9027/kernel_xiaomi_courbet.git'
        type: string
      kernel_branch:
        description: "github branch like 'perf-ksu-miui'"
        required: true
        default: 'perf-ksu-miui'
        type: string
      kernel_type:
        description: 'Kernel Type PerfKernel or AlfaKernel'
        required: true
        default: 'PerfKernel'
        type: string
      recurse_submodule:
        description: "some kernel source use submodule(true/false)"
        required: true
        default: false
        type: boolean
      is_release:
        description: 'Kernel Release at github true or false'
        required: true
        default: false
        type: boolean

jobs:
  Build-Kernel:
    strategy:
      fail-fast: false
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      KERNEL_NAME: "courbet"
      KERNEL_DIR: "courbet-kernel"
      ARCH: "arm64"
      SUBARCH: "arm64"
      KBUILD_BUILD_USER: "ask9027"
      KBUILD_BUILD_HOST: "github"
      KERNEL_URL: ${{ github.event.inputs.kernel_url }}
      KERNEL_BRANCH: ${{ github.event.inputs.kernel_branch }}
      KERNEL_TYPE: ${{ github.event.inputs.kernel_type }}
      IS_RELEASE: ${{ github.event.inputs.is_release }}
      RECURSE_SUBMODULE: ${{ github.event.inputs.recurse_submodule }}
      KERNEL_VERSION: 'v0000'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: update and download required packages
      run: sudo apt update && sudo apt install -y git clang llvm lld build-essential bc libncurses-dev bison flex libssl-dev libelf-dev

    - name: clone kernel source
      run: |
        cd ${GITHUB_WORKSPACE}
        if [ "$RECURSE_SUBMODULE" = "true" ]; then
          git clone --recurse-submodules ${KERNEL_URL} -b ${KERNEL_BRANCH} ${KERNEL_DIR}
        else
          git clone ${KERNEL_URL} -b ${KERNEL_BRANCH} ${KERNEL_DIR}
        fi
        
    - name: build kernel from source
      run: |
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        export ARCH=${ARCH}
        make O=out ${KERNEL_NAME}_defconfig
        make -j$(nproc --all) CC=clang LLVM=1 ARCH=arm64 O=out \
        HEADER_ARCH=arm64 \
        SUBARCH=arm64 \
        CXX=c++ \
        AR=llvm-ar \
        NM=llvm-nm \
        OBJDUMP=llvm-objdump \
        STRIP=llvm-strip \
        READELF=llvm-readelf \
        HOSTCXX=clang++ \
        HOSTAR=llvm-ar \
        LLVM_IAS=1 \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
        CLANG_TRIPLE=aarch64-linux-gnu-
        CONFIG_NO_ERROR_ON_MISMATCH=y

        BUILD_TIME=$(date '+%Y%m%d-%H%M%S')
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        
        KERNEL_VERSION=$(make kernelversion)
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

        mkdir ${GITHUB_WORKSPACE}/output
        cp out/arch/arm64/boot/Image.gz ${GITHUB_WORKSPACE}/output/
        cp out/arch/arm64/boot/dtb.img ${GITHUB_WORKSPACE}/output/
        cp out/arch/arm64/boot/dtbo.img ${GITHUB_WORKSPACE}/output/
        cd ${GITHUB_WORKSPACE}

    - name: create anykernel3 zip
      run: |
        git clone https://github.com/ask9027/AnyKernel3.git -b ${KERNEL_TYPE,,}
        cp output/* AnyKernel3/
        cd AnyKernel3

        # Use updated KERNEL_TYPE for the zip file name
        zip -r9 ../${{ env.KERNEL_TYPE }}-${{ env.KERNEL_BRANCH }}-${KERNEL_VERSION}-${KERNEL_NAME}-${BUILD_TIME}.zip * -x .git README.md *placeholder
        cd ${GITHUB_WORKSPACE}

    - name: upload kernel output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_TYPE }}-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_BRANCH }}-${{ env.KERNEL_NAME }}
        path: ${{ env.KERNEL_TYPE }}*.zip

    - name: Create release
      if: ${{ env.IS_RELEASE == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ env.KERNEL_VERSION }}
        name: "Kernel Version ${{ env.KERNEL_VERSION }}"
        body: '${{ env.KERNEL_VERSION }}-${{ env.KERNEL_TYPE }}-${{ env.KERNEL_BRANCH }} for ${{ env.KERNEL_NAME }}'
        draft: false
        prerelease: false
        generate_release_notes: false
        files: ${{ env.KERNEL_TYPE }}*.zip
